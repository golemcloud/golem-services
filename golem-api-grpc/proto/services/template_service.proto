syntax = "proto3";

package golem.cloudservices.templateservice;

import public "models/empty.proto";
import public "models/project_id.proto";
import public "models/template.proto";
import public "models/template_error.proto";
import public "models/template_id.proto";
import public "models/token_secret.proto";

service TemplateService {
  rpc GetTemplates (GetTemplatesRequest) returns (GetTemplatesResponse);
  rpc CreateTemplate (stream CreateTemplateRequest) returns (CreateTemplateResponse);
  rpc DownloadTemplate (DownloadTemplateRequest) returns (stream DownloadTemplateResponse);
  rpc GetTemplate (GetTemplateRequest) returns (GetTemplateResponse);
  rpc GetLatestTemplateVersion (GetLatestTemplateVersionRequest) returns (GetLatestTemplateVersionResponse);
  rpc UpdateTemplate (stream UpdateTemplateRequest) returns (UpdateTemplateResponse);
}

message GetTemplatesRequest {
  ProjectId projectId = 1;
  optional string templateName = 2;
  TokenSecret tokenSecret = 3;
}

message GetTemplatesResponse {
  oneof result {
    GetTemplatesSuccessResponse success = 1;
    TemplateError error = 2;
  }
}

message GetTemplatesSuccessResponse {
  repeated Template templates = 1;
}

message CreateTemplateRequest {
  oneof data {
    CreateTemplateRequestHeader header = 1;
    CreateTemplateRequestChunk chunk = 2;
  }
}

message CreateTemplateRequestHeader {
  ProjectId projectId = 1;
  string templateName = 2;
  TokenSecret tokenSecret = 4;
}

message CreateTemplateRequestChunk {
  bytes templateChunk = 1;
}

message CreateTemplateResponse {
  oneof result {
    Template success = 1;
    TemplateError error = 2;
  }
}

message DownloadTemplateRequest {
  TemplateId templateId = 1;
  optional int32 version = 2;
  TokenSecret tokenSecret = 3;
}

message DownloadTemplateResponse {
  oneof result {
    bytes successChunk = 1;
    TemplateError error = 2;
  }
}

message GetTemplateRequest {
  TemplateId templateId = 1;
  TokenSecret tokenSecret = 2;
}

message GetTemplateResponse {
  oneof result {
    GetTemplateSuccessResponse success = 1;
    TemplateError error = 2;
  }
}

message GetTemplateSuccessResponse {
  repeated Template templates = 1;
}

message GetLatestTemplateVersionRequest {
  TemplateId templateId = 1;
  TokenSecret tokenSecret = 2;
}

message GetLatestTemplateVersionResponse {
  oneof result {
    int32 success = 1;
    TemplateError error = 2;
  }
}

message UpdateTemplateRequest {
  oneof data {
    UpdateTemplateRequestHeader header = 1;
    UpdateTemplateRequestChunk chunk = 2;
  }
}

message UpdateTemplateRequestHeader {
  TemplateId templateId = 1;
  TokenSecret tokenSecret = 2;
}

message UpdateTemplateRequestChunk {
  bytes templateChunk = 1;
}

message UpdateTemplateResponse {
  oneof result {
    Template success = 1;
    TemplateError error = 2;
  }
}

