syntax = "proto3";

import public "models/account_id.proto";
import public "models/calling_convention.proto";
import public "models/empty.proto";
import public "models/golem_error.proto";
import public "models/invocation_key.proto";
import public "models/log_event.proto";
import public "models/promise_id.proto";
import public "models/resource_limits.proto";
import public "models/shard_id.proto";
import public "models/template_id.proto";
import public "models/type.proto";
import public "models/val.proto";
import public "models/worker_id.proto";
import public "models/worker_metadata.proto";
import public "models/worker_status.proto";

package golem.workerexecutor;

service WorkerExecutor {
  rpc CreateWorker(CreateWorkerRequest) returns (CreateWorkerResponse);
  rpc GetInvocationKey(GetInvocationKeyRequest) returns (GetInvocationKeyResponse);
  rpc InvokeAndAwaitWorker(InvokeAndAwaitWorkerRequest) returns (InvokeAndAwaitWorkerResponse);
  rpc InvokeWorker(InvokeWorkerRequest) returns (InvokeWorkerResponse);
  rpc ConnectWorker(ConnectWorkerRequest) returns (stream LogEvent);
  rpc DeleteWorker(WorkerId) returns (DeleteWorkerResponse);
  rpc CompletePromise(CompletePromiseRequest) returns (CompletePromiseResponse);
  rpc InterruptWorker(InterruptWorkerRequest) returns (InterruptWorkerResponse);
  rpc RevokeShards(RevokeShardsRequest) returns (RevokeShardsResponse);
  rpc AssignShards(AssignShardsRequest) returns (AssignShardsResponse);
  rpc GetWorkerMetadata(WorkerId) returns (GetWorkerMetadataResponse);
  rpc ResumeWorker(ResumeWorkerRequest) returns (ResumeWorkerResponse);
}

message InvokeWorkerResponse {
  oneof result {
    Empty success = 1;
    GolemError failure = 2;
  }
}

message DeleteWorkerResponse {
  oneof result {
    Empty success = 1;
    GolemError failure = 2;
  }
}

message CompletePromiseRequest {
  PromiseId promise_id = 1;
  bytes data = 2;
}

message CompletePromiseResponse {
  oneof result {
    CompletePromiseSuccess success = 1;
    GolemError failure = 2;
  }
}

message CompletePromiseSuccess {
  bool completed = 1;
}

message InterruptWorkerResponse {
  oneof result {
    Empty success = 1;
    GolemError failure = 2;
  }
}

message CreateWorkerRequest {
  WorkerId worker_id = 1;
  int32 template_version = 2;
  repeated string args = 3;
  map<string, string> env = 4;
  AccountId account_id = 5;
  ResourceLimits account_limits = 6;
}

message CreateWorkerResponse {
  oneof result {
    Empty success = 1;
    GolemError failure = 2;
  }
}

message GetInvocationKeyRequest {
  WorkerId worker_id = 1;
}

message GetInvocationKeyResponse {
  oneof result {
    GetInvocationKeySuccess success = 1;
    GolemError failure = 2;
  }
}

message GetInvocationKeySuccess {
  InvocationKey invocation_key = 1;
}

message InvokeAndAwaitWorkerRequest {
  WorkerId worker_id = 1;
  string name = 2;
  repeated Val input = 3;
  InvocationKey invocation_key = 4;
  CallingConvention calling_convention = 5;
  AccountId account_id = 6;
  ResourceLimits account_limits = 7;
}

message InvokeAndAwaitWorkerResponse {
  oneof result {
    InvokeAndAwaitWorkerSuccess success = 1;
    GolemError failure = 2;
  }
}

message InvokeAndAwaitWorkerSuccess {
  repeated Val output = 1;
}

message InvokeWorkerRequest {
  WorkerId worker_id = 1;
  string name = 2;
  repeated Val input = 3;
  AccountId account_id = 4;
  ResourceLimits account_limits = 5;
}

message ConnectWorkerRequest {
  WorkerId worker_id = 1;
  AccountId account_id = 2;
  ResourceLimits account_limits = 3;
}

message InterruptWorkerRequest {
  WorkerId worker_id = 1;
  bool recover_immediately = 2;
}

message RevokeShardsRequest {
  repeated ShardId shard_ids = 1;
}

message RevokeShardsResponse {
  oneof result {
    Empty success = 1;
    GolemError failure = 2;
  }
}

message AssignShardsRequest {
  repeated ShardId shard_ids = 1;
}

message AssignShardsResponse {
  oneof result {
    Empty success = 1;
    GolemError failure = 2;
  }
}

message GetWorkerMetadataResponse {
  oneof result {
    WorkerMetadata success = 1;
    GolemError failure = 2;
  }
}

message ResumeWorkerRequest {
  WorkerId worker_id = 1;
  string name = 2;
}

message ResumeWorkerResponse {
  oneof result {
    Empty success = 1;
    GolemError failure = 2;
  }
}
