syntax = "proto3";

package golem.cloudservices.workerservice;

import public "models/empty.proto";
import public "models/calling_convention.proto";
import public "models/complete_parameters.proto";
import public "models/invocation_key.proto";
import public "models/invoke_parameters.proto";
import public "models/invoke_result.proto";
import public "models/invoke_result_json.proto";
import public "models/token_secret.proto";
import public "models/versioned_worker_id.proto";
import public "models/worker_error.proto";
import public "models/worker_metadata.proto";
import public "models/log_event.proto";

service WorkerService {
  rpc LaunchNewWorker (LaunchNewWorkerRequest) returns (LaunchNewWorkerResponse);
  rpc CompletePromise (CompletePromiseRequest) returns (CompletePromiseResponse);
  rpc DeleteWorker (DeleteWorkerRequest) returns (DeleteWorkerResponse);
  rpc GetWorkerMetadata (GetWorkerMetadataRequest) returns (GetWorkerMetadataResponse);
  rpc InterruptWorker (InterruptWorkerRequest) returns (InterruptWorkerResponse);
  rpc InvokeAndAwait (InvokeAndAwaitRequest) returns (InvokeAndAwaitResponse);
  rpc Invoke (InvokeRequest) returns (InvokeResponse);
  rpc GetInvocationKey (GetInvocationKeyRequest) returns (GetInvocationKeyResponse);
  rpc ResumeWorker (ResumeWorkerRequest) returns (ResumeWorkerResponse);
  rpc GetWorkerById (GetWorkerByIdRequest) returns (GetWorkerByIdResponse);
  rpc ConnectWorker(ConnectWorkerRequest) returns (stream LogEvent);

  // Temporary for proxying the REST API
  rpc InvokeJson (InvokeRequestJson) returns (InvokeResponse);
  // Temporary for proxying the REST API
  rpc InvokeAndAwaitJson (InvokeAndAwaitRequestJson) returns (InvokeAndAwaitResponseJson);
}

message LaunchNewWorkerRequest {
  TemplateId templateId = 1;
  string name = 2;
  repeated string args = 3;
  map<string, string> env = 4;
  TokenSecret tokenSecret = 5;
}

message LaunchNewWorkerResponse {
  oneof result {
    VersionedWorkerId success = 1;
    WorkerError error = 2;
  }
}

message CompletePromiseRequest {
  WorkerId workerId = 1;
  CompleteParameters completeParameters = 2;
  TokenSecret tokenSecret = 3;
}

message CompletePromiseResponse {
  oneof result {
    bool success = 1;
    WorkerError error = 2;
  }
}

message DeleteWorkerRequest {
  WorkerId workerId = 1;
  TokenSecret tokenSecret = 2;
}

message DeleteWorkerResponse {
  oneof result {
    Empty success = 1;
    WorkerError error = 2;
  }
}

message GetWorkerMetadataRequest {
  WorkerId workerId = 1;
  TokenSecret tokenSecret = 2;
}

message GetWorkerMetadataResponse {
  oneof result {
    WorkerMetadata success = 1;
    WorkerError error = 2;
  }
}

message InterruptWorkerRequest {
  WorkerId workerId = 1;
  bool recoverImmediately = 2;
  TokenSecret tokenSecret = 3;
}

message InterruptWorkerResponse {
  oneof result {
    Empty success = 1;
    WorkerError error = 2;
  }
}

message InvokeAndAwaitRequest {
  WorkerId workerId = 1;
  InvocationKey invocationKey = 2;
  string function = 3;
  InvokeParameters invokeParameters = 4;
  CallingConvention callingConvention = 5;
  TokenSecret tokenSecret = 6;
}

// Temporary
message InvokeAndAwaitRequestJson {
  WorkerId workerId = 1;
  InvocationKey invocationKey = 2;
  string function = 3;
  string invokeParametersJson = 4;
  CallingConvention callingConvention = 5;
  TokenSecret tokenSecret = 6;
}

message InvokeAndAwaitResponse {
  oneof result {
    InvokeResult success = 1;
    WorkerError error = 2;
  }
}

// Temporary
message InvokeAndAwaitResponseJson {
  oneof result {
    InvokeResultJson success = 1;
    WorkerError error = 2;
  }
}

message InvokeRequest {
  WorkerId workerId = 1;
  string function = 2;
  InvokeParameters invokeParameters = 3;
  TokenSecret tokenSecret = 4;
}

// Temporary
message InvokeRequestJson {
  WorkerId workerId = 1;
  string function = 2;
  string invokeParametersJson = 3;
  TokenSecret tokenSecret = 4;
}

message InvokeResponse {
  oneof result {
    Empty success = 1;
    WorkerError error = 2;
  }
}

message GetInvocationKeyRequest {
  WorkerId workerId = 1;
  TokenSecret tokenSecret = 2;
}

message GetInvocationKeyResponse {
  oneof result {
    InvocationKey success = 1;
    WorkerError error = 2;
  }
}

message ResumeWorkerRequest {
  WorkerId workerId = 1;
  TokenSecret tokenSecret = 2;
}

message ResumeWorkerResponse {
  oneof result {
    Empty success = 1;
    WorkerError error = 2;
  }
}

message GetWorkerByIdRequest {
  WorkerId workerId = 1;
  TokenSecret tokenSecret = 2;
}

message GetWorkerByIdResponse {
  oneof result {
    VersionedWorkerId success = 1;
    WorkerError error = 2;
  }
}

message ConnectWorkerRequest {
  WorkerId worker_id = 1;
  TokenSecret tokenSecret = 2;
}

